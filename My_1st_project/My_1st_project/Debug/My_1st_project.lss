
My_1st_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f81  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000831  00000000  00000000  00001839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a80  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000709  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000038a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 00 	call	0x132	; 0x132 <main>
  74:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app>:
#include "../MCAL/Interrupts/INT.h"


void app()
{
	LED_count=0;
  7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <LED_count>
while(1){	
		if (LED_count==0)
  80:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <LED_count>
  84:	81 11       	cpse	r24, r1
  86:	11 c0       	rjmp	.+34     	; 0xaa <app+0x2e>
		{
			DIO_SetPinValue(DIO_PORTA,1,DIO_LOW);//YELLOW_CAR
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,0,DIO_HIGH);//RED-CAR
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			startTimer(PS1024,20);
  9a:	64 e1       	ldi	r22, 0x14	; 20
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
			LED_count=1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_count>
  a8:	eb cf       	rjmp	.-42     	; 0x80 <app+0x4>
		}
		else if (LED_count==1)
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	b1 f4       	brne	.+44     	; 0xda <app+0x5e>
		{
			DIO_SetPinValue(DIO_PORTA,0,DIO_LOW);
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			for (u8 i=0;i<10;i++)
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	09 c0       	rjmp	.+18     	; 0xce <app+0x52>
			{
				DIO_togglepinvalue(DIO_PORTA,1);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_togglepinvalue>
				startTimer(PS64,32);
  c4:	60 e2       	ldi	r22, 0x20	; 32
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
			LED_count=1;
		}
		else if (LED_count==1)
		{
			DIO_SetPinValue(DIO_PORTA,0,DIO_LOW);
			for (u8 i=0;i<10;i++)
  cc:	cf 5f       	subi	r28, 0xFF	; 255
  ce:	ca 30       	cpi	r28, 0x0A	; 10
  d0:	a8 f3       	brcs	.-22     	; 0xbc <app+0x40>
			{
				DIO_togglepinvalue(DIO_PORTA,1);
				startTimer(PS64,32);
			}
			LED_count=2;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_count>
  d8:	d3 cf       	rjmp	.-90     	; 0x80 <app+0x4>
		}
		
		else if (LED_count==2)
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 f4       	brne	.+36     	; 0x102 <app+0x86>
		{
			DIO_SetPinValue(DIO_PORTA,1,DIO_LOW);
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTA,2,DIO_HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			startTimer(PS1024,20);
  f2:	64 e1       	ldi	r22, 0x14	; 20
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
			LED_count=3;
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <LED_count>
 100:	bf cf       	rjmp	.-130    	; 0x80 <app+0x4>
		}
		else if (LED_count==3)
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	09 f0       	breq	.+2      	; 0x108 <app+0x8c>
 106:	bc cf       	rjmp	.-136    	; 0x80 <app+0x4>
		{
			DIO_SetPinValue(DIO_PORTA,2,DIO_LOW);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			for (u8 i=0;i<10;i++)
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	09 c0       	rjmp	.+18     	; 0x128 <app+0xac>
			{
				DIO_togglepinvalue(DIO_PORTA,1);
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_togglepinvalue>
				startTimer(PS64,32);
 11e:	60 e2       	ldi	r22, 0x20	; 32
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
			LED_count=3;
		}
		else if (LED_count==3)
		{
			DIO_SetPinValue(DIO_PORTA,2,DIO_LOW);
			for (u8 i=0;i<10;i++)
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	ca 30       	cpi	r28, 0x0A	; 10
 12a:	a8 f3       	brcs	.-22     	; 0x116 <app+0x9a>
			{
				DIO_togglepinvalue(DIO_PORTA,1);
				startTimer(PS64,32);
			}
			LED_count=0;
 12c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <LED_count>
 130:	a7 cf       	rjmp	.-178    	; 0x80 <app+0x4>

00000132 <main>:
//*********PORTA for cars*********//
//*********PORTB for pedestrians*********//

int main(void)
{
	set_TimerMode(normal);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <set_TimerMode>
	set_TimerIntialValue(12);
 138:	6c e0       	ldi	r22, 0x0C	; 12
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 18 03 	call	0x630	; 0x630 <set_TimerIntialValue>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_INPUT);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_OUTPUT);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN0,DIO_OUTPUT);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_OUTPUT);
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_OUTPUT);	
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
	
	
	en_global_INT();
 18a:	0e 94 23 02 	call	0x446	; 0x446 <en_global_INT>
	INT_senseControl(INT_0,FAL_EDG);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 27 02 	call	0x44e	; 0x44e <INT_senseControl>
	en_external_INT(INT_0);
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 73 02 	call	0x4e6	; 0x4e6 <en_external_INT>
	
    while (1) 
    {
		app();
 19c:	0e 94 3e 00 	call	0x7c	; 0x7c <app>
 1a0:	fd cf       	rjmp	.-6      	; 0x19c <main+0x6a>

000001a2 <DIO_SetPinDirection>:
	case DIO_PORTD:
		PORTD = value ;
		break;	
	}
}

 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	a1 f5       	brne	.+104    	; 0x20e <DIO_SetPinDirection+0x6c>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	89 f0       	breq	.+34     	; 0x1cc <DIO_SetPinDirection+0x2a>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_SetPinDirection+0x14>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	c9 f0       	breq	.+50     	; 0x1e2 <DIO_SetPinDirection+0x40>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	11 f1       	breq	.+68     	; 0x1f8 <DIO_SetPinDirection+0x56>
 1b4:	08 95       	ret
 1b6:	2a b3       	in	r18, 0x1a	; 26
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDirection+0x20>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDirection+0x1c>
 1c6:	82 2b       	or	r24, r18
 1c8:	8a bb       	out	0x1a, r24	; 26
 1ca:	08 95       	ret
 1cc:	27 b3       	in	r18, 0x17	; 23
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinDirection+0x36>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinDirection+0x32>
 1dc:	82 2b       	or	r24, r18
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	08 95       	ret
 1e2:	24 b3       	in	r18, 0x14	; 20
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPinDirection+0x4c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPinDirection+0x48>
 1f2:	82 2b       	or	r24, r18
 1f4:	84 bb       	out	0x14, r24	; 20
 1f6:	08 95       	ret
 1f8:	21 b3       	in	r18, 0x11	; 17
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPinDirection+0x62>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPinDirection+0x5e>
 208:	82 2b       	or	r24, r18
 20a:	81 bb       	out	0x11, r24	; 17
 20c:	08 95       	ret
 20e:	41 11       	cpse	r20, r1
 210:	37 c0       	rjmp	.+110    	; 0x280 <DIO_SetPinDirection+0xde>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	91 f0       	breq	.+36     	; 0x23a <DIO_SetPinDirection+0x98>
 216:	28 f0       	brcs	.+10     	; 0x222 <DIO_SetPinDirection+0x80>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	d9 f0       	breq	.+54     	; 0x252 <DIO_SetPinDirection+0xb0>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	29 f1       	breq	.+74     	; 0x26a <DIO_SetPinDirection+0xc8>
 220:	08 95       	ret
 222:	2a b3       	in	r18, 0x1a	; 26
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinDirection+0x8c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinDirection+0x88>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	8a bb       	out	0x1a, r24	; 26
 238:	08 95       	ret
 23a:	27 b3       	in	r18, 0x17	; 23
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPinDirection+0xa4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPinDirection+0xa0>
 24a:	80 95       	com	r24
 24c:	82 23       	and	r24, r18
 24e:	87 bb       	out	0x17, r24	; 23
 250:	08 95       	ret
 252:	24 b3       	in	r18, 0x14	; 20
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0xbc>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0xb8>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	84 bb       	out	0x14, r24	; 20
 268:	08 95       	ret
 26a:	21 b3       	in	r18, 0x11	; 17
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPinDirection+0xd4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPinDirection+0xd0>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret

00000282 <DIO_SetPinValue>:
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	a1 f5       	brne	.+104    	; 0x2ee <DIO_SetPinValue+0x6c>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	89 f0       	breq	.+34     	; 0x2ac <DIO_SetPinValue+0x2a>
 28a:	28 f0       	brcs	.+10     	; 0x296 <DIO_SetPinValue+0x14>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	c9 f0       	breq	.+50     	; 0x2c2 <DIO_SetPinValue+0x40>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	11 f1       	breq	.+68     	; 0x2d8 <DIO_SetPinValue+0x56>
 294:	08 95       	ret
 296:	2b b3       	in	r18, 0x1b	; 27
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinValue+0x20>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinValue+0x1c>
 2a6:	82 2b       	or	r24, r18
 2a8:	8b bb       	out	0x1b, r24	; 27
 2aa:	08 95       	ret
 2ac:	28 b3       	in	r18, 0x18	; 24
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinValue+0x36>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinValue+0x32>
 2bc:	82 2b       	or	r24, r18
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	08 95       	ret
 2c2:	25 b3       	in	r18, 0x15	; 21
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_SetPinValue+0x4c>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_SetPinValue+0x48>
 2d2:	82 2b       	or	r24, r18
 2d4:	85 bb       	out	0x15, r24	; 21
 2d6:	08 95       	ret
 2d8:	22 b3       	in	r18, 0x12	; 18
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinValue+0x62>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinValue+0x5e>
 2e8:	82 2b       	or	r24, r18
 2ea:	82 bb       	out	0x12, r24	; 18
 2ec:	08 95       	ret
 2ee:	41 11       	cpse	r20, r1
 2f0:	37 c0       	rjmp	.+110    	; 0x360 <DIO_SetPinValue+0xde>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	91 f0       	breq	.+36     	; 0x31a <DIO_SetPinValue+0x98>
 2f6:	28 f0       	brcs	.+10     	; 0x302 <DIO_SetPinValue+0x80>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	d9 f0       	breq	.+54     	; 0x332 <DIO_SetPinValue+0xb0>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	29 f1       	breq	.+74     	; 0x34a <DIO_SetPinValue+0xc8>
 300:	08 95       	ret
 302:	2b b3       	in	r18, 0x1b	; 27
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_SetPinValue+0x8c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_SetPinValue+0x88>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	8b bb       	out	0x1b, r24	; 27
 318:	08 95       	ret
 31a:	28 b3       	in	r18, 0x18	; 24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_SetPinValue+0xa4>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_SetPinValue+0xa0>
 32a:	80 95       	com	r24
 32c:	82 23       	and	r24, r18
 32e:	88 bb       	out	0x18, r24	; 24
 330:	08 95       	ret
 332:	25 b3       	in	r18, 0x15	; 21
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_SetPinValue+0xbc>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_SetPinValue+0xb8>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	85 bb       	out	0x15, r24	; 21
 348:	08 95       	ret
 34a:	22 b3       	in	r18, 0x12	; 18
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_SetPinValue+0xd4>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_SetPinValue+0xd0>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret

00000362 <DIO_GetPinValue>:
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	79 f0       	breq	.+30     	; 0x384 <DIO_GetPinValue+0x22>
 366:	28 f0       	brcs	.+10     	; 0x372 <DIO_GetPinValue+0x10>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	a9 f0       	breq	.+42     	; 0x396 <DIO_GetPinValue+0x34>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	e1 f0       	breq	.+56     	; 0x3a8 <DIO_GetPinValue+0x46>
 370:	24 c0       	rjmp	.+72     	; 0x3ba <DIO_GetPinValue+0x58>
 372:	89 b3       	in	r24, 0x19	; 25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_GetPinValue+0x1a>
 378:	95 95       	asr	r25
 37a:	87 95       	ror	r24
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_GetPinValue+0x16>
 380:	81 70       	andi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	86 b3       	in	r24, 0x16	; 22
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_GetPinValue+0x2c>
 38a:	95 95       	asr	r25
 38c:	87 95       	ror	r24
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_GetPinValue+0x28>
 392:	81 70       	andi	r24, 0x01	; 1
 394:	08 95       	ret
 396:	83 b3       	in	r24, 0x13	; 19
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_GetPinValue+0x3e>
 39c:	95 95       	asr	r25
 39e:	87 95       	ror	r24
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_GetPinValue+0x3a>
 3a4:	81 70       	andi	r24, 0x01	; 1
 3a6:	08 95       	ret
 3a8:	80 b3       	in	r24, 0x10	; 16
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_GetPinValue+0x50>
 3ae:	95 95       	asr	r25
 3b0:	87 95       	ror	r24
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_GetPinValue+0x4c>
 3b6:	81 70       	andi	r24, 0x01	; 1
 3b8:	08 95       	ret
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	08 95       	ret

000003be <DIO_SetPortValue>:
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	41 f0       	breq	.+16     	; 0x3d2 <DIO_SetPortValue+0x14>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <DIO_SetPortValue+0x10>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	39 f0       	breq	.+14     	; 0x3d6 <DIO_SetPortValue+0x18>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	39 f0       	breq	.+14     	; 0x3da <DIO_SetPortValue+0x1c>
 3cc:	08 95       	ret
 3ce:	6b bb       	out	0x1b, r22	; 27
 3d0:	08 95       	ret
 3d2:	68 bb       	out	0x18, r22	; 24
 3d4:	08 95       	ret
 3d6:	65 bb       	out	0x15, r22	; 21
 3d8:	08 95       	ret
 3da:	62 bb       	out	0x12, r22	; 18
 3dc:	08 95       	ret

000003de <DIO_togglepinvalue>:
u8   DIO_GetPortValue(u8 PortNo)
{
	u8 port_value = 0;

 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	89 f0       	breq	.+34     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e2:	28 f0       	brcs	.+10     	; 0x3ee <DIO_togglepinvalue+0x10>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	c9 f0       	breq	.+50     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	11 f1       	breq	.+68     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3ec:	08 95       	ret
	switch(PortNo)
	{
	case DIO_PORTA:
 3ee:	2b b3       	in	r18, 0x1b	; 27
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_togglepinvalue+0x1c>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_togglepinvalue+0x18>
 3fe:	82 27       	eor	r24, r18
 400:	8b bb       	out	0x1b, r24	; 27
		port_value = PINA ;
 402:	08 95       	ret
		break;
	case DIO_PORTB:
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	82 27       	eor	r24, r18
 416:	88 bb       	out	0x18, r24	; 24
		port_value = PINB ;
 418:	08 95       	ret
		break;
	case DIO_PORTC:
 41a:	25 b3       	in	r18, 0x15	; 21
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	6a 95       	dec	r22
 428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	82 27       	eor	r24, r18
 42c:	85 bb       	out	0x15, r24	; 21
		port_value = PINC ;
 42e:	08 95       	ret
		break;
	case DIO_PORTD:
 430:	22 b3       	in	r18, 0x12	; 18
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	82 27       	eor	r24, r18
 442:	82 bb       	out	0x12, r24	; 18
 444:	08 95       	ret

00000446 <en_global_INT>:

u8 kawnter=0;

void en_global_INT()
{
	SET_BIT(SREG,7);
 446:	8f b7       	in	r24, 0x3f	; 63
 448:	80 68       	ori	r24, 0x80	; 128
 44a:	8f bf       	out	0x3f, r24	; 63
 44c:	08 95       	ret

0000044e <INT_senseControl>:
}
void INT_senseControl(u8 Intrpt,u8 mode)
{
	if (Intrpt==INT_0)
 44e:	81 11       	cpse	r24, r1
 450:	24 c0       	rjmp	.+72     	; 0x49a <INT_senseControl+0x4c>
	{
		switch(mode)
 452:	61 30       	cpi	r22, 0x01	; 1
 454:	69 f0       	breq	.+26     	; 0x470 <INT_senseControl+0x22>
 456:	28 f0       	brcs	.+10     	; 0x462 <INT_senseControl+0x14>
 458:	62 30       	cpi	r22, 0x02	; 2
 45a:	89 f0       	breq	.+34     	; 0x47e <INT_senseControl+0x30>
 45c:	63 30       	cpi	r22, 0x03	; 3
 45e:	b1 f0       	breq	.+44     	; 0x48c <INT_senseControl+0x3e>
 460:	08 95       	ret
		{
			case LOW_LVL:
			CLR_BIT(MCUCR,0);
 462:	85 b7       	in	r24, 0x35	; 53
 464:	8e 7f       	andi	r24, 0xFE	; 254
 466:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
 468:	85 b7       	in	r24, 0x35	; 53
 46a:	8d 7f       	andi	r24, 0xFD	; 253
 46c:	85 bf       	out	0x35, r24	; 53
			break;
 46e:	08 95       	ret
			case LGC_CHNG:
			SET_BIT(MCUCR,0);
 470:	85 b7       	in	r24, 0x35	; 53
 472:	81 60       	ori	r24, 0x01	; 1
 474:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,1);
 476:	85 b7       	in	r24, 0x35	; 53
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	85 bf       	out	0x35, r24	; 53
			break;
 47c:	08 95       	ret
			case FAL_EDG:
			CLR_BIT(MCUCR,0);
 47e:	85 b7       	in	r24, 0x35	; 53
 480:	8e 7f       	andi	r24, 0xFE	; 254
 482:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
 484:	85 b7       	in	r24, 0x35	; 53
 486:	82 60       	ori	r24, 0x02	; 2
 488:	85 bf       	out	0x35, r24	; 53
			break;
 48a:	08 95       	ret
			case RIS_EDG:
			SET_BIT(MCUCR,0);
 48c:	85 b7       	in	r24, 0x35	; 53
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,1);
 492:	85 b7       	in	r24, 0x35	; 53
 494:	82 60       	ori	r24, 0x02	; 2
 496:	85 bf       	out	0x35, r24	; 53
			break;
 498:	08 95       	ret
		}
	}
	else if (Intrpt==INT_1)
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	19 f5       	brne	.+70     	; 0x4e4 <INT_senseControl+0x96>
	{
		switch(mode)
 49e:	61 30       	cpi	r22, 0x01	; 1
 4a0:	69 f0       	breq	.+26     	; 0x4bc <INT_senseControl+0x6e>
 4a2:	28 f0       	brcs	.+10     	; 0x4ae <INT_senseControl+0x60>
 4a4:	62 30       	cpi	r22, 0x02	; 2
 4a6:	89 f0       	breq	.+34     	; 0x4ca <INT_senseControl+0x7c>
 4a8:	63 30       	cpi	r22, 0x03	; 3
 4aa:	b1 f0       	breq	.+44     	; 0x4d8 <INT_senseControl+0x8a>
 4ac:	08 95       	ret
		{
			case LOW_LVL:
			CLR_BIT(MCUCR,2);
 4ae:	85 b7       	in	r24, 0x35	; 53
 4b0:	8b 7f       	andi	r24, 0xFB	; 251
 4b2:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
 4b4:	85 b7       	in	r24, 0x35	; 53
 4b6:	87 7f       	andi	r24, 0xF7	; 247
 4b8:	85 bf       	out	0x35, r24	; 53
			break;
 4ba:	08 95       	ret
			case LGC_CHNG:
			SET_BIT(MCUCR,2);
 4bc:	85 b7       	in	r24, 0x35	; 53
 4be:	84 60       	ori	r24, 0x04	; 4
 4c0:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,3);
 4c2:	85 b7       	in	r24, 0x35	; 53
 4c4:	87 7f       	andi	r24, 0xF7	; 247
 4c6:	85 bf       	out	0x35, r24	; 53
			break;
 4c8:	08 95       	ret
			case FAL_EDG:
			CLR_BIT(MCUCR,2);
 4ca:	85 b7       	in	r24, 0x35	; 53
 4cc:	8b 7f       	andi	r24, 0xFB	; 251
 4ce:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
 4d0:	85 b7       	in	r24, 0x35	; 53
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	85 bf       	out	0x35, r24	; 53
			break;
 4d6:	08 95       	ret
			case RIS_EDG:
			SET_BIT(MCUCR,2);
 4d8:	85 b7       	in	r24, 0x35	; 53
 4da:	84 60       	ori	r24, 0x04	; 4
 4dc:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,3);
 4de:	85 b7       	in	r24, 0x35	; 53
 4e0:	88 60       	ori	r24, 0x08	; 8
 4e2:	85 bf       	out	0x35, r24	; 53
 4e4:	08 95       	ret

000004e6 <en_external_INT>:
		}
	}
}
void en_external_INT(u8 Int)
{
	switch (Int)
 4e6:	88 23       	and	r24, r24
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <en_external_INT+0xa>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <en_external_INT+0x10>
 4ee:	08 95       	ret
	{
		case INT_0:
		SET_BIT(GICR,6);
 4f0:	8b b7       	in	r24, 0x3b	; 59
 4f2:	80 64       	ori	r24, 0x40	; 64
 4f4:	8b bf       	out	0x3b, r24	; 59
		case INT_1:
		SET_BIT(GICR,7);
 4f6:	8b b7       	in	r24, 0x3b	; 59
 4f8:	80 68       	ori	r24, 0x80	; 128
 4fa:	8b bf       	out	0x3b, r24	; 59
 4fc:	08 95       	ret

000004fe <__vector_1>:
	}
}

ISR(EXT_INT_0)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	cf 93       	push	r28
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	startTimer(PS64,60);
 522:	6c e3       	ldi	r22, 0x3C	; 60
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
	if (DIO_GetPinValue(DIO_PORTD,DIO_PIN2)==DIO_LOW)
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	0e 94 b1 01 	call	0x362	; 0x362 <DIO_GetPinValue>
 532:	81 11       	cpse	r24, r1
 534:	05 c0       	rjmp	.+10     	; 0x540 <__vector_1+0x42>
	{
		kawnter++;
 536:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if (kawnter==0)
 540:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 544:	81 11       	cpse	r24, r1
 546:	41 c0       	rjmp	.+130    	; 0x5ca <__vector_1+0xcc>
	{
		
	
	if (LED_count==0)
 548:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <LED_count>
 54c:	81 11       	cpse	r24, r1
 54e:	0f c0       	rjmp	.+30     	; 0x56e <__vector_1+0x70>
	{
		DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_HIGH);//GRN pedsr
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	62 e0       	ldi	r22, 0x02	; 2
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
		startTimer(PS1024,20);
 55a:	64 e1       	ldi	r22, 0x14	; 20
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
		DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
 56c:	2e c0       	rjmp	.+92     	; 0x5ca <__vector_1+0xcc>
	}
	else if (LED_count==1 ||LED_count==2||LED_count==3)
 56e:	81 50       	subi	r24, 0x01	; 1
 570:	83 30       	cpi	r24, 0x03	; 3
 572:	a0 f0       	brcs	.+40     	; 0x59c <__vector_1+0x9e>
 574:	2a c0       	rjmp	.+84     	; 0x5ca <__vector_1+0xcc>
	{
		for (u8 i=0;i<10;i++)
		{
			DIO_SetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
 576:	41 e0       	ldi	r20, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 41 01 	call	0x282	; 0x282 <DIO_SetPinValue>
			DIO_togglepinvalue(DIO_PORTA,DIO_PIN1);
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_togglepinvalue>
			DIO_togglepinvalue(DIO_PORTB,DIO_PIN1);
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_togglepinvalue>
			startTimer(PS64,32);
 590:	60 e2       	ldi	r22, 0x20	; 32
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
		startTimer(PS1024,20);
		DIO_SetPinValue(DIO_PORTB,DIO_PIN2,DIO_LOW);
	}
	else if (LED_count==1 ||LED_count==2||LED_count==3)
	{
		for (u8 i=0;i<10;i++)
 598:	cf 5f       	subi	r28, 0xFF	; 255
 59a:	01 c0       	rjmp	.+2      	; 0x59e <__vector_1+0xa0>
 59c:	c0 e0       	ldi	r28, 0x00	; 0
 59e:	ca 30       	cpi	r28, 0x0A	; 10
 5a0:	50 f3       	brcs	.-44     	; 0x576 <__vector_1+0x78>
			DIO_SetPinValue(DIO_PORTB,DIO_PIN0,DIO_HIGH);
			DIO_togglepinvalue(DIO_PORTA,DIO_PIN1);
			DIO_togglepinvalue(DIO_PORTB,DIO_PIN1);
			startTimer(PS64,32);
		}
		DIO_SetPortValue(DIO_PORTA,0b00000001);
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPortValue>
		DIO_SetPortValue(DIO_PORTB,0b00000100);
 5aa:	64 e0       	ldi	r22, 0x04	; 4
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPortValue>
		startTimer(PS1024,20);
 5b2:	64 e1       	ldi	r22, 0x14	; 20
 5b4:	84 e0       	ldi	r24, 0x04	; 4
 5b6:	0e 94 1a 03 	call	0x634	; 0x634 <startTimer>
		DIO_SetPortValue(DIO_PORTA,0x00);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPortValue>
		DIO_SetPortValue(DIO_PORTB,0x00);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPortValue>
		
	}
	}
	kawnter=0;
 5ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 5ce:	ff 91       	pop	r31
 5d0:	ef 91       	pop	r30
 5d2:	cf 91       	pop	r28
 5d4:	bf 91       	pop	r27
 5d6:	af 91       	pop	r26
 5d8:	9f 91       	pop	r25
 5da:	8f 91       	pop	r24
 5dc:	7f 91       	pop	r23
 5de:	6f 91       	pop	r22
 5e0:	5f 91       	pop	r21
 5e2:	4f 91       	pop	r20
 5e4:	3f 91       	pop	r19
 5e6:	2f 91       	pop	r18
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <set_TimerMode>:
#include "TIMERS.h"
#include "../regs.h"

void set_TimerMode(u8 mode)
{
	switch(mode)
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	41 f0       	breq	.+16     	; 0x606 <set_TimerMode+0x14>
 5f6:	28 f0       	brcs	.+10     	; 0x602 <set_TimerMode+0x10>
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	61 f0       	breq	.+24     	; 0x614 <set_TimerMode+0x22>
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	89 f0       	breq	.+34     	; 0x622 <set_TimerMode+0x30>
 600:	08 95       	ret
	{
		case normal:
		TCCR0=0x00;
 602:	13 be       	out	0x33, r1	; 51
		break;
 604:	08 95       	ret
		case CTC:
		SET_BIT(TCCR0,3);
 606:	83 b7       	in	r24, 0x33	; 51
 608:	88 60       	ori	r24, 0x08	; 8
 60a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,6);
 60c:	83 b7       	in	r24, 0x33	; 51
 60e:	8f 7b       	andi	r24, 0xBF	; 191
 610:	83 bf       	out	0x33, r24	; 51
		break;
 612:	08 95       	ret
		case PWM:
		CLR_BIT(TCCR0,3);
 614:	83 b7       	in	r24, 0x33	; 51
 616:	87 7f       	andi	r24, 0xF7	; 247
 618:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,6);
 61a:	83 b7       	in	r24, 0x33	; 51
 61c:	80 64       	ori	r24, 0x40	; 64
 61e:	83 bf       	out	0x33, r24	; 51
		break;
 620:	08 95       	ret
		case FastPWM:
		SET_BIT(TCCR0,3);
 622:	83 b7       	in	r24, 0x33	; 51
 624:	88 60       	ori	r24, 0x08	; 8
 626:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,6);
 628:	83 b7       	in	r24, 0x33	; 51
 62a:	80 64       	ori	r24, 0x40	; 64
 62c:	83 bf       	out	0x33, r24	; 51
 62e:	08 95       	ret

00000630 <set_TimerIntialValue>:
		break;
	}
}
void set_TimerIntialValue(u32 Val)
{
	TCNT0=Val;
 630:	62 bf       	out	0x32, r22	; 50
 632:	08 95       	ret

00000634 <startTimer>:
}
void startTimer(u8 prescaler,u8 OVRFLW)
{
	overflows=0;
 634:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflows>
	switch(prescaler)
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	f9 f0       	breq	.+62     	; 0x67a <startTimer+0x46>
 63c:	28 f4       	brcc	.+10     	; 0x648 <startTimer+0x14>
 63e:	88 23       	and	r24, r24
 640:	41 f0       	breq	.+16     	; 0x652 <startTimer+0x1e>
 642:	81 30       	cpi	r24, 0x01	; 1
 644:	81 f0       	breq	.+32     	; 0x666 <startTimer+0x32>
 646:	42 c0       	rjmp	.+132    	; 0x6cc <startTimer+0x98>
 648:	83 30       	cpi	r24, 0x03	; 3
 64a:	09 f1       	breq	.+66     	; 0x68e <startTimer+0x5a>
 64c:	84 30       	cpi	r24, 0x04	; 4
 64e:	49 f1       	breq	.+82     	; 0x6a2 <startTimer+0x6e>
 650:	3d c0       	rjmp	.+122    	; 0x6cc <startTimer+0x98>
	{
		case noPS:
		SET_BIT(TCCR0,0);
 652:	83 b7       	in	r24, 0x33	; 51
 654:	81 60       	ori	r24, 0x01	; 1
 656:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,1);
 658:	83 b7       	in	r24, 0x33	; 51
 65a:	8d 7f       	andi	r24, 0xFD	; 253
 65c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,2);
 65e:	83 b7       	in	r24, 0x33	; 51
 660:	8b 7f       	andi	r24, 0xFB	; 251
 662:	83 bf       	out	0x33, r24	; 51
		break;
 664:	33 c0       	rjmp	.+102    	; 0x6cc <startTimer+0x98>
		
		case PS8:
		CLR_BIT(TCCR0,0);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8e 7f       	andi	r24, 0xFE	; 254
 66a:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,1);
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	82 60       	ori	r24, 0x02	; 2
 670:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,2);
 672:	83 b7       	in	r24, 0x33	; 51
 674:	8b 7f       	andi	r24, 0xFB	; 251
 676:	83 bf       	out	0x33, r24	; 51
		break;
 678:	29 c0       	rjmp	.+82     	; 0x6cc <startTimer+0x98>
		
		case PS64:
		SET_BIT(TCCR0,0);
 67a:	83 b7       	in	r24, 0x33	; 51
 67c:	81 60       	ori	r24, 0x01	; 1
 67e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,1);
 680:	83 b7       	in	r24, 0x33	; 51
 682:	82 60       	ori	r24, 0x02	; 2
 684:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,2);
 686:	83 b7       	in	r24, 0x33	; 51
 688:	8b 7f       	andi	r24, 0xFB	; 251
 68a:	83 bf       	out	0x33, r24	; 51
		break;
 68c:	1f c0       	rjmp	.+62     	; 0x6cc <startTimer+0x98>
		
		case PS256:
		SET_BIT(TCCR0,0);
 68e:	83 b7       	in	r24, 0x33	; 51
 690:	81 60       	ori	r24, 0x01	; 1
 692:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,1);
 694:	83 b7       	in	r24, 0x33	; 51
 696:	8d 7f       	andi	r24, 0xFD	; 253
 698:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,2);
 69a:	83 b7       	in	r24, 0x33	; 51
 69c:	8b 7f       	andi	r24, 0xFB	; 251
 69e:	83 bf       	out	0x33, r24	; 51
		break;
 6a0:	15 c0       	rjmp	.+42     	; 0x6cc <startTimer+0x98>
		
		case PS1024:
		SET_BIT(TCCR0,0);
 6a2:	83 b7       	in	r24, 0x33	; 51
 6a4:	81 60       	ori	r24, 0x01	; 1
 6a6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,1);
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	8d 7f       	andi	r24, 0xFD	; 253
 6ac:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,2);
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	84 60       	ori	r24, 0x04	; 4
 6b2:	83 bf       	out	0x33, r24	; 51
		break;
 6b4:	0b c0       	rjmp	.+22     	; 0x6cc <startTimer+0x98>
	}
	while(overflows<OVRFLW)
	{
		while(GET_BIT(TIFR,0)==0);
 6b6:	08 b6       	in	r0, 0x38	; 56
 6b8:	00 fe       	sbrs	r0, 0
 6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <startTimer+0x82>
		SET_BIT(TIFR,0);
 6bc:	88 b7       	in	r24, 0x38	; 56
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	88 bf       	out	0x38, r24	; 56
		overflows++;
 6c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflows>
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflows>
		SET_BIT(TCCR0,0);
		CLR_BIT(TCCR0,1);
		SET_BIT(TCCR0,2);
		break;
	}
	while(overflows<OVRFLW)
 6cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflows>
 6d0:	86 17       	cp	r24, r22
 6d2:	88 f3       	brcs	.-30     	; 0x6b6 <startTimer+0x82>
	{
		while(GET_BIT(TIFR,0)==0);
		SET_BIT(TIFR,0);
		overflows++;
	}
	TCCR0=0x00;
 6d4:	13 be       	out	0x33, r1	; 51
	overflows=0;
 6d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflows>
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
